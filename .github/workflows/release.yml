name: Build and Release WENDy R package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install xtl, xtensor, and xtensor-blas (Linux and macOS)
        run: |
          # Install xtl
          git clone --branch 0.8.0 https://github.com/xtensor-stack/xtl.git
          cd xtl
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          sudo make install
          cd ../..
          rm -rf xtl

          # Install xtensor
          git clone --branch 0.27.0 https://github.com/xtensor-stack/xtensor.git
          cd xtensor
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          sudo make install
          cd ../..
          rm -rf xtensor

          # Install xtensor-blas
          git clone --branch 0.22.0 https://github.com/xtensor-stack/xtensor-blas.git
          cd xtensor-blas
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          sudo make install
          cd ../..
          rm -rf xtensor-blas

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        
      - name: Use binary packages (Posit PPM)
        run: echo "options(repos = c(RSPM = 'https://packagemanager.posit.co/cran/latest'))" >> ~/.Rprofile
        
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-pip cmake g++ libeigen3-dev libfftw3-dev \
            libgmp-dev libfmt-dev \
            coinor-libipopt-dev pkg-config libopenblas-dev liblapack-dev \
            libgoogle-glog-dev libgflags-dev libomp-dev libceres-dev libmpc-dev \
            llvm clang libarb-dev r-cran-rcpp r-cran-devtools
 
      - name: Build and install SymEngine (Linux)
        if: runner.os == 'Linux'
        run: |
          git clone --branch v0.11.1 https://github.com/symengine/symengine.git
          cd symengine
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DBUILD_SHARED_LIBS=ON \
            -DLLVM_DIR=$(llvm-config --cmakedir) \
            -DWITH_LLVM=ON \
            make -j2 
            sudo make install 
            cd ../..  
            rm -rf symengine          

      - name: Build and install SymEngine (Mac)
        if: runner.os == 'macOS'
        run: |
          git clone --branch v0.11.1 https://github.com/symengine/symengine.git
          cd symengine
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local
            -DLLVM_DIR=$(brew --prefix llvm)/lib/cmake/llvm \
            -DWITH_LLVM=ON \
            make -j2 
            sudo make install 
            cd ../..  
            rm -rf symengine          

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake eigen ceres-solver fftw gmp fmt ipopt pkg-config llvm
        
      - name: Install R package dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        if: runner.os == 'macOS'
        with:
            cache: true
            packages: Rcpp, devtools
            extra-packages: pak
            
      - name: Build core C++ library
        run: |
          cd src/core
          mkdir -p build
          cd build
          
          if [[ "$RUNNER_OS" == "macOS" ]]; then
          # Use Homebrew LLVM for OpenMP support
           
          export CXX=/opt/homebrew/opt/llvm/bin/clang++
          export LDFLAGS="-L/opt/homebrew/opt/llvm/lib -Wl,-rpath,/opt/homebrew/opt/llvm/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"

          cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="/usr/local;/opt/homebrew" \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_CXX_FLAGS="-Xpreprocessor -fopenmp -I/opt/homebrew/include" \
            -DOpenMP_CXX_FLAGS="-Xpreprocessor -fopenmp" \
            -DOpenMP_CXX_LIB_NAMES="omp" \
            -DCMAKE_EXE_LINKER_FLAGS="/opt/homebrew/opt/libomp/lib/libomp.dylib" \
            -DOpenMP_omp_LIBRARY="/opt/homebrew/opt/libomp/lib/libomp.dylib" \
            ..
          else
            cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_PREFIX_PATH="/usr/local" \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON \
          fi       
          
          cmake --build . --target wendy
          cd ../../../

      - name: Generate Rcpp attributes
        run: Rscript -e "Rcpp::compileAttributes('.')"

      - name: Build R package
        run: R CMD build .

      - name: Upload R package tarball
        uses: actions/upload-artifact@v4
        with:
          name: wendy-tarball-${{ runner.os }}
          path: wendy_*.tar.gz

      - name: Save tarball path for release
        id: tarball
        run: echo "TARBALL_PATH=$(ls wendy_*.tar.gz)" >> $GITHUB_ENV

  release:
    name: Attach tarballs to GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -lhR artifacts

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/wendy-tarball-ubuntu-latest/wendy_*.tar.gz
            artifacts/wendy-tarball-macos-latest/wendy_*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
