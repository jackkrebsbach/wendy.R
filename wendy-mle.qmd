---
Title: Wendy Exploration MLE
author: Jack Krebsbach
format:
 typst:
    toc: true
    section-numbering: 1.1.a
---

# Wendy

## Test functions

```{python}
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import quad
from scipy.integrate import solve_ivp


# Test function: This is centered at 0
def phi(t, r=2, c=0):
    return np.exp(
        -9 / np.maximum((1 - ((t - c) / r) ** 2), 1e-10)
    )  # We use 1e-10 instead of 0, otherwise we divide by 0


def phi_normed(t):
    C = quad(lambda t: phi(t), a=0, b=1)
    return phi(t) / C


t = np.arange(-1, 1, 0.01)

plt.clf()
plt.plot(t, phi(t, r=1))
```

What about a different centering?
```{python}
t = np.arange(-1, 3, 0.01)
plt.plot(t, phi(t, r=3, c=1))
```


```{python}
def goodwin_2d(t, u, p):
    """
    Goodwin 2D oscillator system
    u1' = p1 - p3/(36 + p2*u2)
    u2' = p4*u1 - p5
    """
    u1, u2 = u
    p1, p2, p3, p4, p5 = p

    du1dt = p1 - p3 / (36 + p2 * u2)
    du2dt = p4 * u1 - p5

    return [du1dt, du2dt]


p_star = [72, 1, 2, 1, 1]
t_span = [0, 60]
u0 = [7, -10]

sol = solve_ivp(
    goodwin_2d, t_span, u0, args=(p_star,), dense_output=True, rtol=1e-8, atol=1e-10
)

```


```{r}
library(reticulate)
x <- py$t
class(x)
```