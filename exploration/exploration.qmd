---
Title: Wendy Exploration MLE
author: Jack Krebsbach
format:
 typst:
    toc: true
    section-numbering: 1.1.a
---

# Wendy

Load libraries

```{r}
library(reticulate)
```


## System of ODE exploration

Let us generate some data so we can explore optimizing the test function radius so that the integral error does not dominate the noise. We will look at the goodwind system in 2-Dimensions.
```{python}
import numpy as np
from scipy.integrate import quad
import matplotlib.pyplot as plt
from scipy.integrate import quad


def goodwin_2d(t, u, p):
    """
    Goodwin 2D oscillator system
    u1' = p1 - p3/(36 + p2*u2)
    u2' = p4*u1 - p5
    """
    u1, u2 = u
    p1, p2, p3, p4, p5 = p

    du1dt = p1 - p3 / (36 + p2 * u2)
    du2dt = p4 * u1 - p5

    return [du1dt, du2dt]


npoints = 100
t_span = [0, 20]
t_eval = np.linspace(t_span[0], t_span[1], npoints)
u0 = [7, -10]
p_star = [72, 1, 2, 1, 1]

sol = solve_ivp(
    goodwin_2d,
    t_span,
    u0,
    args=(p_star,),
    dense_output=True,
    rtol=1e-8,
    atol=1e-10,
    t_eval=t_eval,
)
```

Plot the data and add some noise
```{python}
t = sol.t
u1_star = sol.y[0]
u2_star = sol.y[1]

# Generate some noise proportional to the data
noise_ratio = 0.05
mean = np.array([0.0, 0.0])
cov = np.diag([noise_ratio * np.var(u1_star), noise_ratio * np.var(u2_star)])
noise = np.random.multivariate_normal(mean, cov, size=npoints)

e1 = [x[0] for x in noise]
e2 = [x[1] for x in noise]

u1 = u1_star + e1
u2 = u2_star + e2


plt.clf()
plt.title("Noisy Data from Goodwin System")
plt.plot(t, u1, marker="o", linestyle="None", markerfacecolor="none", label="u1")
plt.plot(t, u2, marker="o", linestyle="None", markerfacecolor="none", label="u2")
plt.legend()
```

## WENDy Module Development

Now lets look at the system in R and see how we can build a symbolic representation in SymEngine.


I explored trying to pass an R function and building it symbolically in cpp, but could not get around it. So looks like we will have to use symengine as a dependency to build the system symbolically in R and then passing it to rcpp.

```{r}
library(Rcpp)
library(symengine)

f <- function(u, p, t) {
  du1 <- p[[1]] - p[[3]] / (36 + p[[2]] * u[[2]])
  du2 <- p[[4]] * u[[1]] - p[[5]]
  list(du1, du2)
}

p_hat <- as.numeric(py$p_star)
U <- matrix(c(py$u1, py$u2), ncol = 2)

# Create symbols of system (parameters, state variables, and time )
u <- lapply(1:ncol(U), function(i) S(paste0("u", i)))
p <- lapply(1:length(p_hat), function(i) S(paste0("p", i)))
t <- S("t")

du <- f(u, p, t) |>
  vapply(as.character, character(1))

```

```{r}
Sys.setenv("PKG_CPPFLAGS" = "-I/opt/homebrew/include")
Sys.setenv("PKG_LIBS" = "-L/opt/homebrew/lib -lsymengine -lflint -lgmp -lmpfr")

Rcpp::sourceCpp('./pkg-dev.cpp')

loadModule('WENDy')

w <- new(WENDy, du, U, p_hat)

#Expose functions and methods
J <- w$J # Number of parameters
D <- w$D # Dimension of system

w$log_details()

```


```{python}
import numpy as np
import matplotlib.pyplot as plt

l = 4
M = 20
n = M * l

pts = [np.exp((2j * np.pi * m * n) / M) for m in range(0, M + 1)]

print(np.real(sum(pts)))
```

```{python}
plt.clf()
x = np.real(pts)
y = np.imag(pts)
plt.plot(x, y)
```

We use the Discrete Fourier Transform (DFT) to approximate the Fourier Coefficients of the Fourier Transform.


```{python}
def f(t):
    return np.sin(2 * np.pi * t) + 0.5 * np.cos(4 * np.pi * t)


def fourier_series_coeffs(func, T, N):
    """Compute N Fourier series coefficients for func on [0, T]"""
    coeffs = []
    for k in range(N):
        integrand = lambda t: func(t) * np.exp(-1j * 2 * np.pi * k * t / T)
        c_k, _ = quad(lambda t: np.real(integrand(t)), 0, T)
        c_k_im, _ = quad(lambda t: np.imag(integrand(t)), 0, T)
        c_k = (c_k + 1j * c_k_im) / T
        coeffs.append(c_k)
    return np.array(coeffs)


N = 32
T = 1.0
t_samples = np.linspace(0, T, N, endpoint=False)
x_samples = f(t_samples)

dft_coeffs = np.fft.fft(x_samples) / N
fs_coeffs = fourier_series_coeffs(f, T, N)

plot()
```


Now we can use undersampling to approximate higher modes that N/2
```{python}
m = 4

print(f"DFT coefficient for mode {m}: {dft_coeffs[m]}")
print(f"Fourier series coefficient for mode {m}: {fs_coeffs[m]}")
print(f"Absolute error: {abs(dft_coeffs[m] - fs_coeffs[m])}")

# We see that the 31 mode is not estimated well at all by the DFT!
print(dft_coeffs[N - 2])
print(fs_coeffs[N - 2])
```

```{python}
s = 4  # Subsampling factor
N_sub = N // s
t_sub = t_samples[::s]
x_sub = x_samples[::s]
dft_sub = np.fft.fft(x_sub) / N_sub

# The m-th mode in the original data aliases to m' in the subsampled DFT
m = 31  # Try a high mode
m_alias = m % N_sub

print(f"Original DFT coefficient for mode {m}: {dft_coeffs[m]}")
print(f"Subsampled DFT coefficient for aliased mode {m_alias}: {dft_sub[m_alias]}")
print(f"Fourier series coefficient for mode {m}: {fs_coeffs[m]}")
```